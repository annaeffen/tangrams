// possible states of the world
var statePrior =  Categorical({vs: ['rare', 'common'], ps: [.2, .8]});

// possible utterances (include null utterance to make sure dists are well-formed)
var utterances = ['cheap', 'expensive'];
var utterancePrior = Categorical({vs: utterances, ps: [.5, .5]});

// takes a sample from a dirichlet distribution for each word,
// representing the extent to which that word describes each object
var lexiconPrior = function(){
  var meanings = map(function(utt) {
    var t1Prob = uniform(0,1);
    return {'rare' : t1Prob, 'common' : 1-t1Prob};
  }, utterances);
  return _.zipObject(utterances, meanings);
};

// set speaker optimality
var params = {
  alpha : 3,
  beta : 1
};

// 'cheap' is cheaper than 'expensive'
var uttCost = function(utt) {
  return (utt == 'cheap' ? .5 : 
          utt == 'expensive' ? 1 :
          10);
}

// literal listener (using real-valued lexicon)
var L0 = function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    factor(Math.log(lexicon[utt][state]));
    return state;
  });
};

// pragmatic speaker 
var S1 = function(state, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    factor(params.alpha * (L0(utt, lexicon).score(state) - uttCost(utt)));
    return utt;
  });
};

// conventional listener
var L1 = function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    observe(S1(state, lexicon), utt);
    return state;
  });
};

// conventional listener (L1, marginalizing over lexicons)
var L = function(utt, data) {
  return Infer({method:"forward", samples: 10000}, function(){
    var lexicon = lexiconPrior();
    var state = sample(L1(utt, lexicon));
    return state;
  });
};

// conventional speaker (S1, reasoning about expected L1 behavior across lexicons)
var S = function(state, data) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    var listener = Infer({method: 'forward', samples: 10000}, function() {
      var lexicon = lexiconPrior();
      return sample(L1(utt, lexicon));
    });
    factor(params.alpha * (listener.score(state) - uttCost(utt)));
    return utt;
  });
};

// viz(L2('cheap', possibleLexicons[]))
console.log("speaker conveying common world:");
console.log(S('common', []).print());
console.log("speaker conveying rare world:");
console.log(S('rare', []).print());

console.log("listener hearing expensive utterance:");
console.log(L('expensive', []).print());
console.log("listener hearing cheap utterance:");
console.log(L('cheap', []).print());
