// possible states of the world
var states = ['t1', 't2'];
var statePrior =  Categorical({vs: states, ps: [1/2, 1/2]});

// possible utterances
var utterances = ['label1', 'label2'];
var utterancePrior = Categorical({vs: utterances, ps: [1/2, 1/2]});

// takes a sample from a (discretized) dirichlet distribution for each word,
// representing the extent to which that word describes each object
var lexiconPrior = Infer({method: 'enumerate'}, function(){
  var meanings = map(function(utt) {
    var t1Prob = uniformDraw([0.01, .25, .5, .75, 0.99]);
    return {'t1' : t1Prob, 't2' : 1-t1Prob};
  }, utterances);
  return _.object(utterances, meanings);
});

// speaker optimality
var alpha = 1;

// length-based cost (although they're all the same length here)
var uttCost = function(utt) {
  return utt.split(' ').length;
};

// literal listener
var L0 = cache(function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    factor(Math.log(lexicon[utt][state]));
    return state;
  });
});

// pragmatic speaker
var S1 = cache(function(state, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    factor(alpha * (L0(utt, lexicon).score(state)
                    - uttCost(utt)));
    return utt;
  });
});

// conventional listener
var L1 = cache(function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    observe(S1(state, lexicon), utt);
    return state;
  });
});

var lexiconPosterior = cache(function(originAgent, data) {
  return Infer({method: 'enumerate'}, function() {
    var lexicon = sample(lexiconPrior);
    mapData({data: data}, function(datum){
      if(originAgent === 'L') {
        observe(S1(datum.obj, lexicon), datum.utt);
      } else if(originAgent === 'S') {
        observe(L1(datum.utt, lexicon), datum.obj);
      }
    });
    return lexicon;
  });
});

// conventional listener (L1, marginalizing over lexicons themselves)
var L = function(utt, data) {
  return Infer({method:"enumerate"}, function(){
    var lexicon = sample(lexiconPosterior('L', data));
    var state = sample(L1(utt, lexicon));
    return state;
  });
};

// conventional speaker (S1, reasoning about expected L1 behavior across lexicons)
var S = function(state, data) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    var listener = Infer({method: 'enumerate'}, function() {
      var lexicon = sample(lexiconPosterior('S', data));
      return sample(L1(utt, lexicon));
    });
    factor(alpha * (listener.score(state) - uttCost(utt)));
    return utt;
  });
};

console.log("initial listener interpretation (first trial)");
console.log(L('label1', []));

console.log("listener hearing label1 after data:");
console.log(L('label1', [{utt: 'label1', obj: 't1'}]));

// console.log("listener hearing label2 after data:");
// console.log(L('label2', [{utt: 'label1', obj: 't1'}]));

// console.log("listener hearing label1 after opposite data:");
// console.log(L('label1', [{utt: 'label1', obj: 't2'}]));

// console.log("listener hearing label1 after more data:");
// console.log(L('label1', [{utt: 'label1', obj: 't1'},
// 			 {utt: 'label1', obj: 't1'},
// 			 {utt: 'label2', obj: 't2'}]));
